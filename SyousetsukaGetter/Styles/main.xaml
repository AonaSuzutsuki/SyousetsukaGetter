<ResourceDictionary xmlns:_7dtd_svmanager_fix="clr-namespace:SyousetsukaGetter"  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <Style x:Key="BackgroundGrid" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="#222" />
    </Style>

    <Style x:Key="Icon" TargetType="Image">
        <Setter Property="Source" Value="/Imgs/1.ico" />
    </Style>

    <!-- ステータスボタン -->
    <Style x:Key="CaptionButtonStyleKey" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="Marlett"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Border.Effect>
                            <DropShadowEffect Opacity="0"/>
                        </Border.Effect>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.6"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.ShadowDepth)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Color)" Storyboard.TargetName="border">
                                            <EasingColorKeyFrame KeyTime="0" Value="White"/>
                                        </ColorAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)" Storyboard.TargetName="border">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.6"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="#33332c" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <SolidColorBrush x:Key="StandardBorderBrush" Color="#888" />
    <SolidColorBrush x:Key="StandardBackgroundBrush" Color="#FFF" />
    <SolidColorBrush x:Key="HoverBorderBrush" Color="#DDD" />
    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="Gray" />
    <SolidColorBrush x:Key="SelectedForegroundBrush" Color="White" />
    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="NormalBrush" Color="Transparent" />
    <SolidColorBrush x:Key="SelectedNormalBrush" Color="#777" />
    <SolidColorBrush x:Key="NormalBorderBrush" Color="#666" />
    <SolidColorBrush x:Key="VerticalBackground" Color="#666" />
    <SolidColorBrush x:Key="VerticalSelectedBackground" Color="#777" />
    <SolidColorBrush x:Key="HorizontalNormalBrush" Color="#888" />
    <SolidColorBrush x:Key="HorizontalNormalBorderBrush" Color="#888" />
    <LinearGradientBrush x:Key="ListBoxBackgroundBrush"
            StartPoint="0,0" EndPoint="1,0.001">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="White" Offset="0.0" />
                <GradientStop Color="White" Offset="0.6" />
                <GradientStop Color="#DDDDDD" Offset="1.2"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="StandardBrush"
            StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="GlyphBrush" Color="#bbb" />
    <SolidColorBrush x:Key="SelectedGlyphBrush" Color="#bbb" />
    <SolidColorBrush x:Key="MainBackgroundBrush" Color="Transparent" />
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border
          Name="Border"
          Margin="1"
          CornerRadius="5"
          Background="{StaticResource NormalBrush}"
          BorderBrush="{StaticResource NormalBorderBrush}"
          BorderThickness="0">
                        <Path
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Fill="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=RepeatButton}}"
            Data="{Binding Path=Content,
                RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background"
                                Value="{StaticResource SelectedNormalBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource ResourceKey=SelectedGlyphBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource ResourceKey=GlyphBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Margin="0"
          CornerRadius="5"
          Background="{Binding Foreground,  RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Thumb}}"
          BorderBrush="{Binding Foreground,  RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Thumb}}"
          BorderThickness="1" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{StaticResource VerticalSelectedBackground}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource VerticalBackground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="VerticalScrollBar"
            TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="20"/>
                <RowDefinition Height="0.00001*"/>
                <RowDefinition MaxHeight="20"/>
            </Grid.RowDefinitions>
            <Border
      Grid.RowSpan="3"
      CornerRadius="0"
      Background="{StaticResource ResourceKey=MainBackgroundBrush}" />
            <RepeatButton
      Grid.Row="0"
      Style="{StaticResource ScrollBarLineButton}"
      Height="18"
      Command="ScrollBar.LineUpCommand"
      Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track
      Name="PART_Track"
      Grid.Row="1"
      IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb
          Style="{StaticResource ScrollBarThumb}"
          Margin="1,0,1,0"
          Background="{StaticResource HorizontalNormalBrush}"
          BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton
      Grid.Row="3"
      Style="{StaticResource ScrollBarLineButton}"
      Height="18"
      Command="ScrollBar.LineDownCommand"
      Content="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="HorizontalScrollBar"
            TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="20"/>
                <ColumnDefinition Width="0.00001*"/>
                <ColumnDefinition MaxWidth="20"/>
            </Grid.ColumnDefinitions>
            <Border
      Grid.ColumnSpan="3"
      CornerRadius="0"
      Background="{StaticResource ResourceKey=MainBackgroundBrush}" />
            <RepeatButton
      Grid.Column="0"
      Style="{StaticResource ScrollBarLineButton}"
      Width="18"
      Command="ScrollBar.LineLeftCommand"
      Content="M 4 0 L 4 8 L 0 4 Z" />
            <Track
      Name="PART_Track"
      Grid.Column="1"
      IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb
          Style="{StaticResource ScrollBarThumb}"
          Margin="0,1,0,1"
          Background="{StaticResource NormalBrush}"
          BorderBrush="{StaticResource NormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton
          Style="{StaticResource ScrollBarPageButton}"
          Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton
      Grid.Column="3"
      Style="{StaticResource ScrollBarLineButton}"
      Width="18"
      Command="ScrollBar.LineRightCommand"
      Content="M 0 0 L 4 4 L 0 8 Z"/>
        </Grid>
    </ControlTemplate>
    <sys:Double x:Key="ScrollBarWidth">12</sys:Double>
    <sys:Double x:Key="ScrollBarHeight">12</sys:Double>
    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="{StaticResource ResourceKey=ScrollBarWidth}" />
                <Setter Property="Template"
                        Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="{StaticResource ResourceKey=ScrollBarHeight}"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template"
                        Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="FavsScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <ScrollContentPresenter Grid.Column="1"/>

                        <ScrollBar Name="PART_VerticalScrollBar"
            Value="{TemplateBinding VerticalOffset}"
            Maximum="{TemplateBinding ScrollableHeight}"
            ViewportSize="{TemplateBinding ViewportHeight}"
            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar Name="PART_HorizontalScrollBar"
            Orientation="Horizontal"
            Grid.Row="1"
            Grid.Column="1"
            Value="{TemplateBinding HorizontalOffset}"
            Maximum="{TemplateBinding ScrollableWidth}"
            ViewportSize="{TemplateBinding ViewportWidth}"
            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CustomScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid x:Name="EmptyGrid" Background="Transparent" Width="{StaticResource ScrollBarWidth}" Height="{StaticResource ScrollBarHeight}" HorizontalAlignment="Right" VerticalAlignment="Bottom" />
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <DockPanel Margin="{TemplateBinding Padding}">
                                <ScrollContentPresenter Name="PART_ScrollContentPresenter" KeyboardNavigation.DirectionalNavigation="Local" CanContentScroll="{TemplateBinding CanContentScroll}"/>
                            </DockPanel>
                            <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Value="{TemplateBinding HorizontalOffset}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                            <ScrollBar Name="PART_VerticalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Value="{TemplateBinding VerticalOffset}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HorizontalScrollBarVisibility" Value="Hidden">
                            <Setter Property="Visibility" Value="Hidden" TargetName="EmptyGrid" />
                        </Trigger>
                        <Trigger Property="VerticalScrollBarVisibility" Value="Hidden">
                            <Setter Property="Visibility" Value="Hidden" TargetName="EmptyGrid" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Storyboard x:Key="myStoryboard" FillBehavior="HoldEnd">
        <ColorAnimation 
                 Storyboard.TargetName="BottomNewsGrid"
                 Storyboard.TargetProperty="(Grid.Background).(SolidColorBrush.Color)"
                 To="Blue" Duration="0:0:03" />
    </Storyboard>

    <!-- プログレスバー -->
    <Style x:Key="ProgressBarStyle" TargetType="ProgressBar">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="2" Padding="1">
                        <Grid x:Name="PART_Track" >
                            <Rectangle x:Name="PART_Indicator"  HorizontalAlignment="Left" RadiusX="2" RadiusY="2" Fill="{TemplateBinding Foreground}">
                            </Rectangle>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="IndeterminateProgressBar" TargetType="ProgressBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar" >
                    <Grid Name="TemplateRoot" SnapsToDevicePixels="True">
                        <Rectangle RadiusX="2" RadiusY="2" Fill="Transparent" />
                        <Border CornerRadius="0,0,0,0" Margin="1,1,1,1">
                            <Border.Background>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.Background>
                        </Border>
                        <Border BorderThickness="1" BorderBrush="#bbb" Margin="1,1,1,1">
                            <Border.Background>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.Background>
                        </Border>
                        <Rectangle Name="PART_Track" Margin="1,1,1,1" />
                        <Decorator Name="PART_Indicator" Margin="1,1,1,1" HorizontalAlignment="Left">
                            <Grid Name="Foreground">
                                <Rectangle Fill="Transparent" Margin="1" Name="Indicator" />
                                <Grid Margin="1" Name="Animation" ClipToBounds="True">
                                    <Border Name="PART_GlowRect" Width="100"  Margin="0,0,0,0" HorizontalAlignment="Left" Background="{TemplateBinding Foreground}"/>
                                </Grid>
                                <Grid Name="Overlay">
                                </Grid>
                            </Grid>
                        </Decorator>
                        <Border BorderThickness="0" CornerRadius="0,0,0,0" BorderBrush="Transparent" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    


    <FontFamily x:Key="FontName">Meiryo</FontFamily>
    <FontFamily x:Key="MenuFontName">Meiryo</FontFamily>
    <sys:Double x:Key="BaseFontSize">12</sys:Double>
    <SolidColorBrush x:Key="BorderColor" Color="#999" />
    <SolidColorBrush x:Key="ListBorderColor" Color="#555" />
    <SolidColorBrush x:Key="BorderWhiteColor" Color="#fff" />
    <SolidColorBrush x:Key="AroundBorderColor" Color="#4090ff" />
    <SolidColorBrush x:Key="AroundBorderColor2" Color="#ff6b00" />
    <SolidColorBrush x:Key="DeAroundBorderColor" Color="#4090ff66" />

    <!-- StatTitle -->
    <Style x:Key="StatTitle" TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="Script" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Foreground" Value="White" />
    </Style>
    
    <!-- Menu -->
    <SolidColorBrush x:Key="MenuBackground" Color="Transparent" />
    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{StaticResource MenuBackground}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
    </Style>
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="FontFamily" Value="{StaticResource ResourceKey=MenuFontName}" />
        <Setter Property="FontSize" Value="{StaticResource BaseFontSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border"
                        Background="#222"
                        BorderBrush="Transparent"
                        BorderThickness="0">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition x:Name="Col3" Width="14"/>
                            </Grid.ColumnDefinitions>

                            <ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          x:Name="HeaderHost"
                                          RecognizesAccessKey="True"
                                          ContentSource="Header" />

                            <ContentPresenter Grid.Column="2"
                                          Margin="8,1,8,1"
                                          x:Name="IGTHost"
                                          ContentSource="InputGestureText"
                                          VerticalAlignment="Center" />
                            <Path
                                Name="NextTab"
                                Visibility="Hidden"
                                Grid.Column="3"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="M 0 0 L 0 7 L 4 3.5 Z" 
                                Fill="#777" />

                            <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Border x:Name="SubMenuBorder" BorderBrush="#555" BorderThickness="1" Padding="1">
                                    <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                        <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                            <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                            <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                        </Trigger>

                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="6,1,6,1"/>
                            <Setter TargetName="NextTab" Property="Visibility" Value="Visible"/>
                        </Trigger>

                        <!-- Role = SubMenuItem : this is a child menu item which has children-->
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Padding" Value="6,1,6,1"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                        </Trigger>

                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" Value="#777777" TargetName="Border"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="LightGray"/>
                            <Setter Property="Opacity" Value="0.7" TargetName="Border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MLB_Separator" TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="0,1,0,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid>
                        <Rectangle Height="1" Stroke="#555" />
                        <!--Stroke="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"-->
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="MenuItem">
        <Border>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter 
                        Name="Icon"
                        Margin="6,0,6,0"
                        VerticalAlignment="Center"
                        ContentSource="Icon"/>
                <ContentPresenter 
                        Name="HeaderHost"
                        Margin="15,3,15,3"
                        Grid.Column="1"
                        ContentSource="Header"
                        RecognizesAccessKey="True"/>
                <Path 
                        Grid.Column="3"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="M 0 0 L 0 7 L 4 3.5 Z" 
                        Fill="#777" />
                <Popup 
                        Name="Popup"
                        Placement="Left"
                        HorizontalOffset="-4"
                        IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                        AllowsTransparency="True" 
                        Focusable="False"
                        PopupAnimation="Fade">
                    <Border 
                          Name="SubmenuBorder"
                          SnapsToDevicePixels="True"
                          Background="#000"
                          BorderBrush="#bbb"
                          BorderThickness="1" >
                        <StackPanel  
                                IsItemsHost="True" 
                                KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
    </ControlTemplate>


    <!-- Flat ComboBox -->
    <SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="#e3e9ef" />
    <SolidColorBrush x:Key="ComboBoxNormalBackgroundBrush" Color="#FF3D3D3D" />
    <SolidColorBrush x:Key="ComboBoxDisabledForegroundBrush" Color="#888" />
    <SolidColorBrush x:Key="ComboBoxDisabledBackgroundBrush" Color="#eee" />
    <SolidColorBrush x:Key="ComboBoxDisabledBorderBrush" Color="#888" />
    <ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="2" Name="Border"
              BorderBrush="{StaticResource ComboBoxNormalBorderBrush}" 
              CornerRadius="0" BorderThickness="1, 1, 1, 1" 
              Background="{StaticResource ComboBoxNormalBackgroundBrush}" />
            <Border Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="#444" Name="ButtonBorder"
              CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" 
              Background="{StaticResource ComboBoxNormalBackgroundBrush}" />

            <Path Name="Arrow" Grid.Column="1" 
            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
            HorizontalAlignment="Center" Fill="#444"
            VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="False">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="#bbb"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FF8D979E"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="#bbb"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="#bbb"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBackgroundBrush}"/>
                <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{StaticResource ComboBoxDisabledBorderBrush}"/>
                <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#999"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="White"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton Name="ToggleButton" Grid.Column="2"
                ClickMode="Press" Focusable="False"
                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                Template="{StaticResource ComboBoxToggleButtonTemplate}"/>

                        <ContentPresenter Name="ContentSite" Margin="5, 3, 23, 3" IsHitTestVisible="False"
                              HorizontalAlignment="Left" VerticalAlignment="Center"                              
                              Content="{TemplateBinding ComboBox.SelectionBoxItem}" 
                              ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                        <TextBox Name="PART_EditableTextBox" Margin="3, 3, 23, 3"                     
                     IsReadOnly="{TemplateBinding IsReadOnly}"
                     Visibility="Hidden" Background="Transparent"
                     HorizontalAlignment="Left" VerticalAlignment="Center"
                     Focusable="True" >
                            <TextBox.Template>
                                <ControlTemplate TargetType="TextBox" >
                                    <Border Name="PART_ContentHost" Focusable="False" />
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <!-- Popup showing items -->
                        <Popup Name="Popup" Placement="Bottom"
                   Focusable="False" AllowsTransparency="True"
                   IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                   PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True"
                    MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                    MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <Border Name="DropDownBorder" Background="#FF3D3D3D" Margin="0, 1, 0, 0"
                        CornerRadius="0" BorderThickness="1,1,1,1" 
                        BorderBrush="{StaticResource ComboBoxNormalBorderBrush}"/>
                                <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource ComboBoxDisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ComboBoxItem}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#111"/>
        </Style.Resources>
    </Style>

    <!-- ラベル -->
    <Style TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="{StaticResource ResourceKey=MenuFontName}" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <!-- TextBlock -->
    <Style x:Key="ExTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{StaticResource ResourceKey=MenuFontName}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="LineHeight" Value="24" />
        <Setter Property="Padding" Value="0,7,0,0" />
        <Setter Property="Foreground" Value="White" />
    </Style>

    <!-- CheckBox -->
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="FontFamily" Value="{StaticResource FontName}" />
        <Setter Property="FontSize" Value="12px" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                                        Width="15"
                                        Height="15"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1"
                                        ClipToBounds="True">
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="5" ShadowDepth="2" />
                                </Border.Effect>
                                <Path x:Name="CheckMark"
                                          Width="8"
                                          Height="8"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Data="M 0 0 L 8 8 M 0 8 L 8 0"
                                          Stretch="Fill"
                                          Stroke="LightGray"
                                          StrokeEndLineCap="Round"
                                          StrokeStartLineCap="Round"
                                          StrokeThickness="2" />
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="4,0,0,0"
                                              HorizontalAlignment="Left"
                                              VerticalAlignment="Center"
                                              RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" Value="White" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="Gray" />
                            <Setter TargetName="CheckMark" Property="Stroke" Value="Gray" />
                            <Setter Property="Foreground" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- RadioBottun -->
    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border"
                                        Width="15"
                                        Height="15"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1"
                                        ClipToBounds="True">
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="5" ShadowDepth="2" />
                                </Border.Effect>
                                <Path x:Name="CheckMark"
                                          Width="8"
                                          Height="8"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Data="M 0 0 L 8 8 M 0 8 L 8 0"
                                          Stretch="Fill"
                                          Stroke="LightGray"
                                          StrokeEndLineCap="Round"
                                          StrokeStartLineCap="Round"
                                          StrokeThickness="2" />
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="4,0,0,0"
                                              HorizontalAlignment="Left"
                                              VerticalAlignment="Center"
                                              RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" Value="White" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" Value="Gray" />
                            <Setter TargetName="CheckMark" Property="Stroke" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- StartButton -->
    <Style x:Key="StartBT" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Canvas Height="22" Width="22" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.ColumnSpan="2">
                        <Path x:Name="triangle" Data="M80.375001,97.20943 L80.375,88 87.828125,92.625 z" Fill="White" Height="12" StrokeThickness="0" Stretch="Fill" Stroke="Black" Width="10" Canvas.Left="7" HorizontalAlignment="Left" VerticalAlignment="Top" Canvas.Top="5.2"/>
                        <Ellipse x:Name="ellipse" Fill="#00F4F4F5" HorizontalAlignment="Left" Height="22" Stroke="White" VerticalAlignment="Top" Width="22" RenderTransformOrigin="-0.667,-0.206" OpacityMask="Black"/>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ellipse" Property="Opacity" Value="0.5" />
                            <Setter TargetName="triangle" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- StopButton -->
    <Style x:Key="StopBT" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Canvas Height="22" Width="22" HorizontalAlignment="Left" VerticalAlignment="Top">
                        <Rectangle x:Name="rectangle" Fill="White" Height="8" StrokeThickness="0" Stroke="Black" Width="8" Margin="7,7,6,6" />
                        <Ellipse x:Name="ellipse" Fill="#00F4F4F5" Height="22" Stroke="White" Width="22" RenderTransformOrigin="0.5,0.511" OpacityMask="Black" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="rectangle" Property="Opacity" Value="0.5" />
                            <Setter TargetName="ellipse" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- RefreshBT -->
    <Style x:Key="RefreshBT" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Canvas x:Name="RefreshCov" Height="22" Width="22" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.ColumnSpan="2">
                        <ed:Arc ArcThickness="0" ArcThicknessUnit="Pixel" EndAngle="90" Height="12" Canvas.Left="5.01" Stretch="None" Stroke="White" StartAngle="-50" Canvas.Top="5" Width="11.996" Fill="White"/>
                        <Ellipse x:Name="ellipse" Fill="#00F4F4F5" Height="22" Stroke="White" Width="22" RenderTransformOrigin="-0.667,-0.206" OpacityMask="Black" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                        <ed:RegularPolygon Height="2.75" InnerRadius="1" Canvas.Left="14.918" PointCount="3" Stretch="Fill" Canvas.Top="10.996" Width="3.184" RenderTransformOrigin="0.5,0.5" Fill="White" Stroke="White">
                            <ed:RegularPolygon.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="180"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </ed:RegularPolygon.RenderTransform>
                        </ed:RegularPolygon>
                        <ed:Arc ArcThickness="0" ArcThicknessUnit="Pixel" EndAngle="90" Height="12" Canvas.Left="5.01" Stretch="None" Stroke="White" StartAngle="-50" Canvas.Top="5" Width="11.996" RenderTransformOrigin="0.5,0.5" Fill="White">
                            <ed:Arc.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="180"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </ed:Arc.RenderTransform>
                        </ed:Arc>
                        <ed:RegularPolygon Height="2.748" InnerRadius="1" Canvas.Left="3.926" PointCount="3" Stretch="Fill" Canvas.Top="8.25" Width="3.185" RenderTransformOrigin="0.5,0.5" Fill="White" Stroke="White" />
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="RefreshCov" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- TelnetBT -->
    <Style x:Key="TelnetBT" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#fff" />
        <Setter Property="FontFamily" Value="{StaticResource FontName}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="{TemplateBinding Background}">
                        <Grid>
                            <Path Data="M0,0 L13,0 13,4.9169998 12,4.9169998 12,0.99999994 0.99999994,0.99999994 0.99999994,12 4.9169998,12 4.9169998,13 0,13 z" Fill="White" HorizontalAlignment="Left" Height="15.895" Margin="2.5,2.915,0,0" Stretch="Fill" Stroke="White" StrokeThickness="0" VerticalAlignment="Top" Width="16.908"/>
                            <TextBlock FontFamily="Script" Foreground="White" Padding="0" HorizontalAlignment="Left" Height="13.448" Margin="10.556,7.551,0,0" TextWrapping="Wrap" Text="T" VerticalAlignment="Top" Width="9.694"/>
                        </Grid>
                        <ContentPresenter Margin="4,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- CommandListBT -->
    <Style x:Key="CommandListBT" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#fff" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="{TemplateBinding Background}">
                        <Grid>
                            <Path Data="M0,0 L13,0 13,4.9169998 12,4.9169998 12,0.99999994 0.99999994,0.99999994 0.99999994,12 4.9169998,12 4.9169998,13 0,13 z" Fill="White" HorizontalAlignment="Left" Height="15.895" Margin="2.5,2.915,0,0" Stretch="Fill" Stroke="{TemplateBinding Foreground}" StrokeThickness="0" VerticalAlignment="Top" Width="16.908"/>
                            <TextBlock FontFamily="Script" Foreground="{TemplateBinding Foreground}" Padding="0" HorizontalAlignment="Left" Height="13.448" Margin="10.556,7.551,0,0" TextWrapping="Wrap" Text="C" VerticalAlignment="Top" Width="9.694"/>
                        </Grid>
                        <ContentPresenter Margin="4,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    
    <!-- Plus Button -->
    <Style x:Key="PlusBT" TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#fff" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <StackPanel Orientation="Horizontal" Background="{TemplateBinding Background}">
                        <Grid Width="25" Height="25">
                            <Rectangle Height="2" Margin="0" Width="13" Fill="White"/>
                            <Rectangle Height="13" Margin="0" Width="2" Fill="White"/>
                        </Grid>
                        <ContentPresenter Margin="4,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Opacity" Value="0.3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>
    

    <!-- ContextMenu -->
    <!--<Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="Black" />
    </Style>-->
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="Grid.IsSharedSizeScope"
          Value="true" />
        <Setter Property="HasDropShadow"
          Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                Background="#000"
                BorderThickness="1" BorderBrush="{StaticResource BorderColor}">
                        <Grid>
                            <StackPanel IsItemsHost="True"
                      KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow"
                   Value="true">
                            <Setter TargetName="Border"
                    Property="Padding"
                    Value="1" />
                            <Setter TargetName="Border"
                    Property="CornerRadius"
                    Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ContextMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border Background="Transparent" BorderThickness="0" Margin="-2,-1,-2,-1" CornerRadius="0" Padding="0">
                        <MenuItem Header="{TemplateBinding Header}" Foreground="White" Background="#000" Command="{TemplateBinding Command}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ContextMenu x:Key="CopyOnly">
        <MenuItem Command="ApplicationCommands.Copy" />
    </ContextMenu>
    <ContextMenu x:Key="CopyCutPaste">
        <MenuItem Command="ApplicationCommands.Cut" />
        <MenuItem Command="ApplicationCommands.Copy" />
        <MenuItem Command="ApplicationCommands.Paste" />
    </ContextMenu>

    <!-- ListBox -->
    <Style x:Key="{x:Type ListBox}" TargetType="ListBox">
        <Setter Property="SnapsToDevicePixels"  Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="95" />
        <Setter Property="Foreground" Value="#fff" />
        <Setter Property="Background" Value="#222" />
        <Setter Property="BorderThickness" Value="0,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Name="Border" BorderBrush="{StaticResource ListBorderColor}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0">
                        <ScrollViewer Margin="0,0,0,0" Focusable="false">
                            <StackPanel Margin="2" IsItemsHost="True" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="Transparent" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource BorderColor}" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="10,0,0,0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid>
                        <Border
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        Padding="15">
                            <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Top" />
                        </Border>
                        
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#4090ff" />
                <Setter Property="BorderBrush" Value="#FF2B4A76" />
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#444"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ListView -->
    <LinearGradientBrush  x:Key="ListViewNormalBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF3D3D3D" Offset="1"/>
        <!--<GradientStop Color="#555" Offset="0.5"/>
        <GradientStop Color="#555" Offset="0.5"/>-->
    </LinearGradientBrush>
    <LinearGradientBrush  x:Key="ListViewHoverBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF787878" Offset="1"/>
        <!--<GradientStop Color="#555" Offset="0.5"/>
        <GradientStop Color="#555" Offset="0.5"/>-->
    </LinearGradientBrush>
    <Style x:Key="GridViewColumnHeaderGripper" TargetType="Thumb">
        <Setter Property="Width" Value="18"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="Transparent">
                        <Rectangle HorizontalAlignment="Center" Width="1" Fill="{TemplateBinding Background}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="GridViewColumnHeader">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{StaticResource ListViewNormalBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridViewColumnHeader">
                    <Grid>
                        <Border Name="HeaderBorder" BorderThickness="1" BorderBrush="{StaticResource ResourceKey=BorderColor}" Background="{StaticResource ListViewNormalBrush}" Padding="3">
                            <ContentPresenter Name="HeaderContent"
                                                  TextElement.Foreground="White"
                                                  Margin="0,0,0,1"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  RecognizesAccessKey="True"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <Thumb x:Name="PART_HeaderGripper"
                          HorizontalAlignment="Right"
                          Margin="0,0,-9,0"
                          Style="{StaticResource 
                          GridViewColumnHeaderGripper}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="HeaderBorder" 
                            Property="Background" Value="{StaticResource ListViewHoverBrush}"/>
                            <Setter TargetName="HeaderContent" 
                            Property="TextElement.Foreground" 
                            Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="{StaticResource FontName}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border
                         BorderBrush="Transparent"
                         BorderThickness="0"
                         Background="{TemplateBinding Background}">
                        <GridViewRowPresenter HorizontalAlignment="Stretch" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="Auto" Margin="3" Content="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <!--<Condition Property="Selector.IsSelectionActive" Value="true" />-->
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#4090ff" />
                <!--{x:Static SystemColors.HighlightBrush}-->
            </MultiTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#333"/>
                <!--<Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" SpreadMethod="Pad">
                                <GradientStop Color="#FF150042" Offset="0"/>
                                <GradientStop Color="#FF000000" Offset="1"/>
                                <GradientStop Color="#FFD4D2FF" Offset="0"/>
                                <GradientStop Color="#FF0A002C" Offset="0.995"/>
                                <GradientStop Color="#00FFFFFF" Offset="0"/>
                                <GradientStop Color="#0CF3F2F4" Offset="0.947"/>
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>-->
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ListView}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <Grid Name="Border">
                        <!--<Grid Background="{StaticResource MainBackgroundBrush}" Width="{StaticResource ScrollBarWidth}" Height="{StaticResource ScrollBarHeight}" HorizontalAlignment="Right" VerticalAlignment="Bottom" />-->
                        <ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
                            <ItemsPresenter/>
                        </ScrollViewer>
                        <Border BorderBrush="{StaticResource BorderColor}" BorderThickness="1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="ScrollViewer">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ScrollViewer">
                    <Grid>
                        <Grid x:Name="EmptyGrid" Background="Transparent" Width="{StaticResource ScrollBarWidth}" Height="{StaticResource ScrollBarHeight}" HorizontalAlignment="Right" VerticalAlignment="Bottom" />
                        <!--{StaticResource MainBackgroundBrush}-->
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <DockPanel Margin="{TemplateBinding Padding}">
                                <ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Focusable="False">
                                    <GridViewHeaderRowPresenter
                                    Margin="2,0,2,0"
                                    Columns="{Binding Path=TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"
                                    ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                    ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                    ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                    AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                    ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                    ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </ScrollViewer>
                                <ScrollContentPresenter Name="PART_ScrollContentPresenter" KeyboardNavigation.DirectionalNavigation="Local" CanContentScroll="{TemplateBinding CanContentScroll}"/>
                            </DockPanel>
                            <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Value="{TemplateBinding HorizontalOffset}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                            <ScrollBar Name="PART_VerticalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Value="{TemplateBinding VerticalOffset}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HorizontalScrollBarVisibility" Value="Hidden">
                            <Setter Property="Visibility" Value="Hidden" TargetName="EmptyGrid" />
                        </Trigger>
                        <Trigger Property="VerticalScrollBarVisibility" Value="Hidden">
                            <Setter Property="Visibility" Value="Hidden" TargetName="EmptyGrid" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Border -->
    <Style x:Key="GridBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource BorderColor}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    
    <!-- TextBox -->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="#000" />
        <Setter Property="Foreground" Value="#fff" />
        <Setter Property="BorderBrush" Value="{StaticResource BorderColor}" />
        <Setter Property="FontFamily" Value="Meiryo" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="MyBorder" CornerRadius="0" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" BorderThickness="1" BorderBrush="{StaticResource BorderColor}">
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{StaticResource CustomScrollViewer}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- PasswordBox - TextBox -->
    <Style x:Key="PasswordStyle" TargetType="TextBox">
        <Setter Property="Background" Value="#000" />
        <Setter Property="Foreground" Value="#fff" />
        <Setter Property="BorderBrush" Value="{StaticResource BorderColor}" />
        <Setter Property="FontFamily" Value="Meiryo" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border Name="MyBorder" CornerRadius="0" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" BorderThickness="1" BorderBrush="{StaticResource BorderColor}">
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{StaticResource CustomScrollViewer}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_ContentHost" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="false">
                            <Setter Property="Visibility" Value="Hidden" TargetName="PART_ContentHost" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="EyeMark" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border>
                        <Grid>
                            <Ellipse HorizontalAlignment="Left" Height="9.25" Margin="1.374,6.437,0,0" Stroke="White" VerticalAlignment="Top" Width="19.813"/>
                            <Path Data="M7.8125,7.6875 C7.3122146,9.9845511 7.3386454,12.255426 7.8125,14.5" HorizontalAlignment="Left" Height="9.25" Margin="6.948,6.437,0,0" Stretch="Fill" Stroke="White" VerticalAlignment="Top" Width="1.364"/>
                            <Path Data="M14.520393,7.5308977 C14.865143,9.8651299 15.031643,12.198878 14.770393,14.468398" HorizontalAlignment="Left" Height="8.156" Margin="14.208,6.935,0,0" Stretch="Fill" Stroke="White" VerticalAlignment="Top" Width="1.378"/>
                            <Path Data="M6.25,7.25 C5.3102793,6.2694219 4.7375111,6.0799733 5.5,4.25" HorizontalAlignment="Left" Height="4" Margin="5.146,4.25,0,0" Stretch="Fill" Stroke="White" VerticalAlignment="Top" Width="2.104"/>
                            <Path Data="M11.458333,6.75 C11.396998,5.9219739 11.408304,5.082601 11.375,4.25" HorizontalAlignment="Left" Height="3.5" Margin="11.375,4.25,0,0" Stretch="Fill" Stroke="White" VerticalAlignment="Top" Width="1.083"/>
                            <Path Data="M16.041667,7.0833333 C17.237785,6.4055329 17.770622,6.2421749 18.375,4.7916667" HorizontalAlignment="Left" Height="3.291" Margin="16.042,4.792,0,0" Stretch="Fill" Stroke="White" VerticalAlignment="Top" Width="3.333"/>
                            <Ellipse HorizontalAlignment="Left" Height="3.031" Margin="10,9.625,0,0" Stroke="White" VerticalAlignment="Top" Width="3.094"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel Name="HeaderPanel" Grid.Row="0" Panel.ZIndex="1" Margin="0,0,0,-1"  IsItemsHost="True" 
                                              KeyboardNavigation.TabIndex="1" />
                        <Border Name="Border" Grid.Row="1" Background="Transparent"  BorderBrush="{StaticResource ResourceKey=BorderColor}" BorderThickness="1" 
                                            KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" >
                            <ContentPresenter Name="PART_SelectedContentHost" Margin="2" ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                    <!--<ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="#888888" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                            </Trigger>
                        </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="{StaticResource FontName}" />
        <Setter Property="FontSize" Value="11px" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border  Name="Border" Margin="0,0,-4,0" BorderBrush="{StaticResource ResourceKey=BorderColor}" BorderThickness="1,1,1,0" CornerRadius="0,0,0,0" >
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="12,2,12,2" RecognizesAccessKey="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="#FF3D3D3D" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#FF787878" />
                        </Trigger>
                        
                        <Trigger Property="IsEnabled" Value="True">
                            
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#FF4D4D4D" />
                            <Setter Property="Foreground" Value="#44FFFFFF" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#FF3D3D3D" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TabGrid" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="Transparent" />
    </Style>
    
    <!-- FlatButton -->
    <Style x:Key="FlatButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#fff" />
        <Setter Property="BorderBrush" Value="{StaticResource BorderColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#111" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- StackPanel -->
    <Style TargetType="{x:Type StackPanel}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>



    <!-- MessageBox TextBlock -->
    <Style x:Key="MSGTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontFamily" Value="{StaticResource FontName}" />
    </Style>

</ResourceDictionary>